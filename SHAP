# interpretability method (SHAP)
import numpy as np
from numpy import arange
from matplotlib import pyplot as plt
import pandas as pd
from pandas import  set_option
from pandas.plotting import scatter_matrix
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
from sklearn.pipeline import Pipeline

#
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.svm import SVR
from sklearn.tree import DecisionTreeRegressor
from sklearn.neural_network import MLPRegressor
from sklearn.ensemble import RandomForestRegressor

#stacking
from mlxtend.regressor import StackingRegressor
from mlxtend.regressor import StackingCVRegressor

#
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.metrics import mean_absolute_error

# 
dataset = pd.read_csv("xxxx", encoding = 'gbk', index_col=0)
dataset.head()

#
Y = dataset.Score
X = dataset.drop('Score', axis = 1)
X_train, X_test, Y_train, Y_test = train_test_split(X, Y,test_size=0.3, random_state=7)

#model
scaler = StandardScaler().fit(X_train)
rescaledX = scaler.transform(X_train)
lr = LinearRegression()
knn= KNeighborsRegressor(n_neighbors = 3)
dt= DecisionTreeRegressor(max_depth= 19, min_samples_leaf= 11, min_samples_split= 10)
rf= RandomForestRegressor(n_estimators=700)

#Stacking model
models = [knn,dt,rf]
sclf = StackingCVRegressor(regressors=models, meta_regressor=lr)
my_model = sclf.fit(X_train, Y_train)
import shap

explainer = shap.TreeExplainer(my_model)
shap_values = explainer.shap_values(X)
shap.summary_plot(shap_values, X, max_display=30,show=False)
plt.xlabel('SHAP value (Impact on model)',fontsize=18,family='Times New Roman')
plt.xticks(fontsize=18,family='Times New Roman')
plt.yticks(fontsize=18,family='Times New Roman')

plt.savefig('D:\\SHAP_all.svg',dpi=1000,bbox_inches = 'tight')
plt.show()

shap.summary_plot(shap_values, X, plot_type="bar")
